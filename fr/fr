#!/usr/bin/env python3
'''
    %(prog)s - Free Resource Printer - (C) 2005-2018, Mike Miller
    A program to print available free resources in delicious flavors.
    License: GPLv3+.

    usage: %(prog)s [options]

    TODO:  refactoring

        - move icon decoding and uploading to pform module
        - put icons into data?
        - move version to meta
        - port ansi to newer module
'''
import os
import sys

import fr
from fr import (fmtstr, fmtval, get_units, truncstr, print_meminfo,
                print_diskinfo)

__version__     = '3.00a0'

# Set defaults
_debug          = False
_binary         = False
_colwidth       = 10
_extra_cols_at  = 110
_extra_cols_cap = 4
_graphwidth     = 0
_incolor        = 'auto'
_precision      = -1
out             = sys.stdout.write


def setup():
    'Parse, interpret command line options, discover environment.'
    import shutil
    from argparse import ArgumentParser
    parser = ArgumentParser(usage=__doc__.rstrip())
    parser.add_argument('-a', '--all', action='store_true',
                        help='Include unmounted devices and tmpfs mounts.')
    parser.add_argument('-b', '--binary',
                        action='store_true', dest='binary', default=_binary,
                        help='Use propeller-head binary units (2¹⁰) instead '
                        'of human/SI units (10³).')
    parser.add_argument('-d', '--debug',
                        action='store_true', dest='debug', default=_debug,
                        help='Turns on verbose debugging output.')
    parser.add_argument('-l', '--local', action='store_true',
                        help='Include only local filesystems.')
    parser.add_argument('-p', '--precision', type=int, default=_precision,
                        metavar='#', help='Set number of dec. places shown.')
    parser.add_argument('-r', '--relative', action='store_true',
                        help='Use logarithmic relative disk graph sizes.')

    unit_choices = ('b', 'k', 'm', 'g', 't')
    parser.add_argument('-u', '--unit', default='m', choices=unit_choices,
                        metavar='U', help='Selects unit size: b, k, m, g, t')
    parser.add_argument('-w', '--width', type=int, metavar='#',
                        default=_graphwidth,
                        help='Set the width of the resource graphs.')

    toggle_choices = ('auto', 'on', 'off')
    parser.add_argument('--color', dest='incolor', metavar='...',
                        default=_incolor, choices=toggle_choices,
                        help='Color: (%s)' % ', '.join(toggle_choices))
    parser.add_argument('--version', action='version',
                        version=__version__)

    opts = parser.parse_args()

    # discover environment
    # get_terminal_size(), must be done before colorama to avoid crash on win
    opts.termcols, _ = shutil.get_terminal_size((80, 20))  # fallback
    isatty = hasattr(sys.stdout, 'fileno') and os.isatty(sys.stdout.fileno())
    if not isatty:  # must encode for file redirection
        import codecs
        sys.stdout = codecs.getwriter('utf-8')(sys.stdout)

    plat = sys.platform[:3]
    if plat == 'lin':
        import fr.linux as pform
    elif plat == 'win':
        import fr.windows as pform
    elif plat == 'dar':
        import fr.darwin as pform
    opts.pform = pform  # need to straighten this out
    pform.opts = opts   # need to straighten this out

    # expand colwidth if room, one column extra per ten over threshold
    opts.colwidth = _colwidth
    extrawidth = opts.termcols - _extra_cols_at
    if extrawidth > 0:
        opts.colwidth += min(extrawidth // 10, _extra_cols_cap)  # cap at

    if opts.debug:
        print('termcols:', opts.termcols, '_colwidth:', _colwidth)
        print('_extra_cols_at:', _extra_cols_at)
        print('extrawidth:', extrawidth)
        print('opts.colwidth:', opts.colwidth)

    # determine whether to use color
    opts.hicolor = None
    if opts.incolor == 'auto':
        if isatty:
            if 'NO_COLOR' in os.environ:
                opts.incolor = False
            elif pform.coloravail:
                opts.incolor = True
                opts.hicolor = pform.hicolor
            else:
                opts.incolor = False
        else:
            opts.incolor = False
    elif opts.incolor == 'on':
        if pform.coloravail:
            opts.incolor = True
            opts.hicolor = pform.hicolor
        else:
            raise pform.ColorNotAvail()
    else:
        opts.incolor = False

    return opts


def main(opts):
    ''' Let's get it on... '''
    incolor     = opts.incolor  # cache
    longestpth  = opts.colwidth + 1  # extra space
    widelayout  = opts.termcols > 89
    numcols     = 6

    fr.load_config(opts)
    pform = opts.pform

    opts.outunit, unitstr = get_units(opts.unit, binary=opts.binary)
    if opts.debug:
        print('opts:', opts)    # or will get clobbered by set
        print('unitstr:', unitstr)

    outunit_fmt = fmtval(opts.outunit, override_prec=0, spacing=False, trunc=False)
    out(f'\nFree Resources in Blocks of 1 {unitstr} ({outunit_fmt} bytes)')

    meminfo = pform.get_meminfo(opts)
    if not meminfo:
        print(f'\nError: Could not read memory info @ {pform.memfname}.')
        sys.exit(os.EX_IOERR)

    diskinfo = pform.get_diskinfo(opts,
                                  local_only=opts.local,
                                  show_all=opts.all,
                                  )
    if not diskinfo:
        print('\nError: Could not read disk information.')
        sys.exit(os.EX_IOERR)

    print() # after possible diskinfo warning
    # figure out graph width
    for disk in diskinfo:
        pathlen = len(disk.mntp)
        if pathlen > longestpth:
            longestpth = pathlen

    # cap longest path
    dwidth = opts.colwidth * 2
    longestpth = longestpth if longestpth < dwidth else dwidth

    if not opts.width:  # automatic width
        #         rm path col,   add space each, return path col, graph padding
        taken = ((numcols - 1) * (opts.colwidth + 1)) + longestpth + 4
        if widelayout:
            opts.width = opts.termcols - taken
        else:
            opts.width = 58

    # Headers
    print()
    out(fmtstr('DEVICE', leftjust=True))
    out(fmtstr('VOLUME', leftjust=True))
    out(fmtstr('CAPACITY') + ' ')   # xtra space?
    for header in ['USED', 'FREE']:
        out(fmtstr(header))

    if widelayout:
        if ' ' in pform.col_lblw:   # figure expanding label (on posix)
            lbl = list(pform.col_lblw)
            while len(lbl) < opts.colwidth:
                lbl.insert(5, ' ')
            lbl = ''.join(lbl)
            extspace = 2
        else:
            lbl = pform.col_lblw    # win
            extspace = 3
        out(f'{" " * (opts.width + extspace)} {fmtstr(lbl)}')
    else:
        out('  ' + fmtstr(pform.col_lbls))

    print()
    print_meminfo(meminfo, widelayout, incolor)
    print_diskinfo(diskinfo, widelayout, incolor)

    return os.EX_OK


if __name__ == '__main__':
    sys.exit(main(setup()))
